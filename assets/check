#!/bin/sh
# vim: set ft=sh

set -e

exec 3>&1 # make stdout available as fd 3 for the result
exec 1>&2 # redirect all output to stderr for logging

. $(dirname $0)/common.sh

# for jq
PATH=/usr/local/bin:$PATH

payload=$TMPDIR/git-resource-request

cat > $payload <&0

load_pubkey $payload
configure_credentials $payload

uri=$(jq -r '.source.uri // ""' < $payload)
branch=$(jq -r '.source.branch // ""' < $payload)
pool_name=$(jq -r '.source.pool // ""' < $payload)
diff_filter=$(jq -r '.source.diff_filter // ""' < $payload)
ref=$(jq -r '.version.ref // ""' < $payload)


if [ -z "$uri" ]; then
  config_errors="${config_errors}invalid payload (missing uri)\n"
fi

if [ -z "$branch" ]; then
  config_errors="${config_errors}invalid payload (missing branch)\n"
fi

if [ -z "$pool_name" ]; then
  config_errors="${config_errors}invalid payload (missing pool)\n"
fi

if [ -n "$config_errors" ]; then
  echo -e $config_errors
  exit 1
fi

destination=$TMPDIR/git-resource-repo-cache

if [ -d $destination ]; then
  cd $destination
  git fetch
  git reset --hard FETCH_HEAD
else
  branchflag=""
  if [ -n "$branch" ]; then
    branchflag="--branch $branch"
  fi

  git clone $uri $branchflag $destination
  cd $destination
fi

if [ -n "$diff_filter" ]; then
  diff_filter="--diff-filter $diff_filter"
fi

{
  if [ -n "$ref" ] && git cat-file -e "$ref"; then
    init_commit=$(git rev-list --max-parents=0 HEAD)
    if [ "${ref}" = "${init_commit}" ]; then
      log_range="--reverse HEAD"
    else
      log_range="--reverse ${ref}~1..HEAD"
    fi
  else
    log_range="-1"
  fi

  git log $log_range $diff_filter --pretty='format:%H' -- $pool_name

 } | jq -R '.' | jq -s "map({ref: .})" >&3
